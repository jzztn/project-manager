generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username  String?   @unique
  firstName String?
  lastName  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  projects  Project[]
  tickets   Ticket[]
}

model Member {
  id             String          @id @default(cuid())
  rating         Int             @default(100)
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  authorizations Authorization[]
  messages       Message[]
  reactions      Reaction[]
  tasks          Task[]
  todos          Todo[]
  suggestions    Suggestion[]
  votes          Vote[]
  files          File[]
  announcements  Announcement[]
  participants   Participant[]

  @@unique([userId, projectId])
}

model Project {
  id            String         @id @default(cuid())
  name          String
  description   String
  code          String         @unique
  preserve      Boolean        @default(true)
  over          Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dueAt         DateTime?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  members       Member[]
  roles         Role[]
  messages      Message[]
  tasks         Task[]
  suggestions   Suggestion[]
  files         File[]
  announcements Announcement[]
  tickets       Ticket[]
}

model Ticket {
  id        String  @id @default(cuid())
  code      String
  token     String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
}

model Role {
  id             String          @id @default(cuid())
  name           String
  description    String
  permanent      Boolean         @default(false)
  constant       Boolean         @default(false)
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  permission     Permission?
  authorizations Authorization[]

  @@unique([name, projectId])
}

// Permission to become a creator
// Creator have access to all modifications
model Permission {
  id           String  @id @default(cuid())
  everything   Boolean @default(false)
  project      Boolean @default(false)
  message      Boolean @default(true)
  task         Boolean @default(false)
  todo         Boolean @default(true)
  suggestion   Boolean @default(true)
  file         Boolean @default(true)
  announcement Boolean @default(false)
  ticket       Boolean @default(false)
  role         Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String  @unique
}

model Authorization {
  id       String @id @default(cuid())
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   String

  @@unique([roleId, memberId])
}

model Message {
  id        String     @id @default(cuid())
  text      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  member    Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  reactions Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String  @default("LIKE")
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@unique([emoji, messageId, memberId])
}

model Task {
  id           String        @id @default(cuid())
  name         String
  description  String
  rate         Int           @default(10)
  priority     String        @default("MEDIUM")
  over         Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dueAt        DateTime?
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  todos        Todo[]
  participants Participant[]
}

model Todo {
  id           String        @id @default(cuid())
  name         String
  description  String
  priority     String        @default("MEDIUM")
  over         Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  dueAt        DateTime?
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  task         Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  participants Participant[]
}

model Suggestion {
  id           String        @id @default(cuid())
  name         String
  description  String
  rate         Int           @default(5)
  status       String        @default("PENDING")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  participants Participant[]
  votes        Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  mark         String
  member       Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId String

  @@unique([memberId, suggestionId])
}

model File {
  id           String        @id @default(cuid())
  name         String
  description  String
  extension    String
  path         String
  rate         Int           @default(5)
  status       String        @default("PENDING")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  participants Participant[]
}

model Announcement {
  id           String        @id @default(cuid())
  name         String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     String
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  participants Participant[]
}

model Participant {
  id             String        @id @default(cuid())
  access         Boolean       @default(false)
  member         Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String
  task           Task?         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String?
  todo           Todo?         @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId         String?
  suggestion     Suggestion?   @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId   String?
  file           File?         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String?

  @@unique([memberId, taskId])
  @@unique([memberId, todoId])
  @@unique([memberId, suggestionId])
  @@unique([memberId, fileId])
  @@unique([memberId, announcementId])
}

// enum Priority {
//   LOW
//   MEDIUM
//   HIGH
// }

// enum Status {
//   PENDING
//   APPROVED
//   DECLINED
// }

// enum Emoji {
//   LIKE
//   LOVE
//   HATE
//   LAUGH
//   CRY
//   HAPPY
//   SAD
// }

// enum Mark {
//   POSITIVE
//   NEGATIVE
//   NEUTRAL
// }

// enum Token {
//   REQUEST
//   INVITE
// }
